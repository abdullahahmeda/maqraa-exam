// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = 'src/server/routers/generated'
    generateModelActions = 'create,count,delete,findFirst,findMany,update'
}

// Necessary for Next auth
/// @@Gen.model(hide: true)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  exams         Exam[]
}

/// @@Gen.model(hide: true)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id           String            @id @default(cuid())
  number       Int
  pageNumber   Int
  partNumber   Int
  hadithNumber Int
  text         String         @db.Text()
  type         String
  style        String
  difficulty   String
  option1      String?        @db.Text()
  option2      String?        @db.Text()
  option3      String?        @db.Text()
  option4      String?        @db.Text()
  textForTrue     String?        @db.Text()
  textForFalse    String?        @db.Text()
  answer       String         @db.Text()
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  exams        ExamQuestion[]

  @@index([difficulty])
  @@index([type])
  @@index([pageNumber])
  @@index([style])
  @@index([courseId])

  @@allow('create,update,delete', auth() != null)
  // But you should hide `answer` for students
  @@allow('read', true)
}

model Setting {
  key   String @id
  value String @db.Text()
  @@allow('create,update,delete', auth() != null)
  @@allow('read', true)
}

model Exam {
  id           String         @id @default(cuid())
  difficulty   String
  userId       String?
  grade        Int?
  submittedAt  DateTime?
  createdAt    DateTime       @default(now())
  courseId     String
  curriculumId String
  user         User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  curriculum   Track     @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  questions    ExamQuestion[]

  @@index([grade])
  @@index([difficulty])
  @@index([userId])
  @@index([curriculumId])
  @@index([courseId])

  @@allow('create,read', true)
  @@allow('update,delete', auth() != null)
}

/// @@Gen.model(hide: true)
model ExamQuestion {
  id         Int      @id @default(autoincrement())
  examId     String
  questionId String
  answer     String?  @db.Text()
  isCorrect  Boolean  @default(false)
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([examId])
}

model Cycle {
  id String @id @default(cuid())
  name String
  courses CycleCourse[]

  @@allow('all', auth() != null)
}

model Course {
  id        String          @id @default(cuid())
  name      String
  curricula Track[]
  questions Question[]
  exams     Exam[]
  cycles CycleCourse[]

  @@allow('create,update,delete', auth() != null)
  @@allow('read', true)
}

/// @@Gen.model(hide: true)
model CycleCourse {
  id Int @id @default(autoincrement())
  courseId  String
  cycleId String
  cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([cycleId])
}

model Track {
  id       String    @id @default(cuid())
  name     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  fromPage Int
  toPage   Int
  exams    Exam[]
  curricula Curriculum[]

  @@index([courseId])
  @@index([fromPage])
  @@index([toPage])

  @@allow('create,update,delete', auth() != null)
  @@allow('read', true)
}

model Curriculum {
  id String @id @default(cuid())
  name String
  trackId String
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([trackId])

  @@allow('create,update,delete', auth() != null)
  @@allow('read', true)
}