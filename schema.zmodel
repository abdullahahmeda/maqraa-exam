// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

plugin trpc {
  provider = '@zenstackhq/trpc'
  output = 'src/server/api/routers/generated'
  generateModelActions = 'count,delete,findFirst,findFirstOrThrow,findMany'
  generateClientHelpers = 'next'
}

// Necessary for Next auth
/// @@Gen.model(hide: true)
model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  emailVerified DateTime?
  password String @password(saltLength: 12) @omit
  image String?
  phone String?
  role UserRole
  quizzes Quiz[] @relation("Quiz_examinee")
  corrector Corrector?
  student Student?
  accounts Account[]
  sessions Session[]
  resetPasswordTokens ResetPasswordToken[]
  correctedQuizzes Quiz[] @relation("Quiz_corrector")

  @@allow('all', auth().role == ADMIN) // for admins
  @@allow('read', auth().role != ADMIN) // for correctors and students
  // for user
  @@allow('read,update', auth() == this)
  // @@allow('update', auth() == this && future().role == role)
}


/// @@Gen.model(hide: true)
model Corrector {
  id String @id @default(cuid())
  userId String @unique()
  cycleId String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle Cycle? @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  courses CourseCorrector[]

  @@index([userId])
  @@index([cycleId])

  @@allow('all', auth() != null)
}

/// @@Gen.model(hide: true)
model Student {
  id String @id @default(cuid())
  userId String @unique()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycles StudentCycle[]

  @@index([userId])
  @@allow('all', auth().role == ADMIN)
  @@allow('read', auth().role == CORRECTOR)
  @@allow('read', auth() == user)
}

/// @@Gen.model(hide: true)
model StudentCycle {
  id Int @id @default(autoincrement())
  studentId String
  cycleId String
  curriculumId String
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@unique([cycleId, studentId])

  @@index([studentId])
  @@index([cycleId])
  @@index([curriculumId])

  @@allow('all', true)
}

enum UserRole {
  ADMIN
  STUDENT
  CORRECTOR
}

/// @@Gen.model(hide: true)
model VerificationToken {
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

/// @@Gen.model(hide: true)
model ResetPasswordToken {
  token String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime

  @@index([userId])
}

model Question {
  id String @id @default(cuid())
  number Int
  pageNumber Int
  partNumber Int
  hadithNumber Int
  type QuestionType
  style QuestionStyle
  difficulty QuestionDifficulty
  text String @db.Text()
  textForTrue String? @db.Text()
  textForFalse String? @db.Text()
  option1 String? @db.Text()
  option2 String? @db.Text()
  option3 String? @db.Text()
  option4 String? @db.Text()
  answer String @db.Text()
  anotherAnswer String
  isInsideShaded Boolean
  objective String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes QuizQuestion[]
  errorReports ErrorReport[]

  @@index([partNumber])
  @@index([hadithNumber])
  @@index([difficulty])
  @@index([type])
  @@index([style])
  @@index([courseId])

  @@allow('create,update,delete', auth().role == ADMIN)
  // But you should hide `answer` for students
  @@allow('read', true)
}

enum QuestionType {
  WRITTEN
  MCQ
}

enum QuestionStyle {
  TRUE_OR_FALSE
  CHOOSE
  RAWI
  ANSWER
  MENTION
  COMPLETE
  NUMBER
  EVIDENCE
  WHO_SAID
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

model Setting {
  key String @id
  value String @db.Text()
  @@allow('create,update,delete', auth() != null)
  @@allow('read', true)
}

model SystemExam {
  id String @id @default(cuid())
  name String
  type QuizType
  createdAt DateTime @default(now())
  endsAt DateTime?
  repeatFromSameHadith Boolean @default(false)
  curriculumId String
  cycleId String
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  quizzes Quiz[]
  groups QuestionsGroup[]

  @@index([type])
  @@index([curriculumId])
  @@index([cycleId])

  @@allow('all', auth().role == ADMIN)
  @@allow('read', auth() != null && auth().role != ADMIN)
}


model Quiz {
  id String @id @default(cuid())
  type QuizType @default(WHOLE_CURRICULUM)
  grade Int?
  total Int?
  questionsCreated Boolean @default(false)
  createdAt DateTime @default(now())
  enteredAt DateTime?
  submittedAt DateTime?
  correctedAt DateTime?
  endsAt DateTime?
  repeatFromSameHadith Boolean @default(false)
  curriculumId String
  examineeId String?
  correctorId String?
  systemExamId String?
  corrector User? @relation("Quiz_corrector", fields: [correctorId], references: [id], onDelete: Cascade)
  examinee User? @relation("Quiz_examinee", fields: [examineeId], references: [id], onDelete: Cascade)
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  systemExam SystemExam? @relation(fields: [systemExamId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  groups QuestionsGroup[]

  @@index([grade])
  @@index([type])
  @@index([examineeId])
  @@index([correctorId])
  @@index([curriculumId])
  @@index([systemExamId])

  // TODO: maybe update read rules
  @@allow('all', auth().role == ADMIN) // for admins
  @@allow('create', true) // anyone
  @@allow('read,update', auth().role == CORRECTOR && (correctorId == auth().id || correctorId == null) && systemExam.cycle.correctors?[id == auth().correctorId] && curriculum.track.course.correctors?[corrector.id == auth().correctorId]) // for correctors
  @@allow('read,update', examinee == auth()) // for students
}

enum QuizType {
  WHOLE_CURRICULUM
  FIRST_MEHWARY
  SECOND_MEHWARY
}

/// @@Gen.model(hide: true)
model QuestionsGroup {
  id String @id @default(cuid())
  questionsNumber Int
  gradePerQuestion Int
  order Int
  difficulty QuestionDifficulty?
  styleOrType String?
  quizId String?
  systemExamId String?
  quiz Quiz? @relation(fields: [quizId], references: [id], onDelete: Cascade)
  systemExam SystemExam? @relation(fields: [systemExamId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([systemExamId])
  @@index([order])

  @@allow('create,read,update', true)
}

/// @@Gen.model(hide: true)
model QuizQuestion {
  id String @id @default(cuid())
  answer String? @db.Text()
  order Int @default(1)
  grade Int @default(0)
  weight Int
  questionId String
  quizId String
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([order])

  @@allow('create,read,update', true)
}

model Cycle {
  id String @id @default(cuid())
  name String
  courses CycleCourse[]
  students StudentCycle[]
  systemExams SystemExam[]
  correctors Corrector[]

  @@allow('all', auth() != null)
}

model Course {
  id String @id @default(cuid())
  name String
  tracks Track[]
  questions Question[]
  cycles CycleCourse[]
  correctors CourseCorrector[]

  @@allow('create,update,delete', auth().role == ADMIN)
  @@allow('read', true)
}

model CourseCorrector {
  id String @id @default(cuid())
  courseId String
  correctorId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  corrector Corrector @relation(fields: [correctorId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([correctorId])

  @@allow('all', true)
}

/// @@Gen.model(hide: true)
model CycleCourse {
  id Int @id @default(autoincrement())
  courseId String
  cycleId String
  cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([cycleId])
}

model Track {
  id String @id @default(cuid())
  name String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  curricula Curriculum[]

  @@index([courseId])

  @@allow('create,update,delete', auth().role == ADMIN)
  @@allow('read', true)
}

model Curriculum {
  id String @id @default(cuid())
  name String
  trackId String
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  parts CurriculumPart[]
  quizzes Quiz[]
  systemExams SystemExam[]
  students StudentCycle[]

  @@index([trackId])

  @@allow('create,update,delete', auth().role == ADMIN)
  @@allow('read', true)
}

/// @@Gen.model(hide: true)
model CurriculumPart {
  id Int @id @default(autoincrement())
  name String
  number Int // Part number
  from Int
  mid Int
  to Int
  curriculumId String
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@index([curriculumId])

  @@allow('create,update,delete', auth().role == ADMIN)
  @@allow('read', true)
}

model ErrorReport {
  id String @id @default(cuid())
  name String
  email String
  createdAt DateTime @default(now())
  questionId String
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([createdAt])

  @@allow('all', auth().role == ADMIN)
  @@allow('create', true)
}
