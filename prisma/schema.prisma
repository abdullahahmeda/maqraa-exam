//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    STUDENT
    CORRECTOR
}

enum QuestionType {
    WRITTEN
    MCQ
}

enum QuestionStyle {
    TRUE_OR_FALSE
    CHOOSE
    RAWI
    ANSWER
    MENTION
    COMPLETE
    NUMBER
    EVIDENCE
    WHO_SAID
}

enum QuestionDifficulty {
    EASY
    MEDIUM
    HARD
}

/// @@Gen.model(hide: true)
model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@allow('all', auth() != null)
model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    password String?
    image String?
    role UserRole
    accounts Account[]
    sessions Session[]
    correctedExams Exam[] @relation("Exam_corrector")
    exams Exam[] @relation("Exam_student")
    student Student?

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

model Student {
    id String @id() @default(cuid())
    name String
    userId String @unique()
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@Gen.model(hide: true)
model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime
    @@unique([identifier, token])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Question {
    id String @id() @default(cuid())
    number Int
    pageNumber Int
    partNumber Int
    hadithNumber Int
    type QuestionType
    style QuestionStyle
    difficulty QuestionDifficulty
    text String @db.Text()
    textForTrue String? @db.Text()
    textForFalse String? @db.Text()
    option1 String? @db.Text()
    option2 String? @db.Text()
    option3 String? @db.Text()
    option4 String? @db.Text()
    answer String @db.Text()
    anotherAnswer String?
    isInsideShaded Boolean
    objective String
    courseId String
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    exams GroupQuestion[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([partNumber])
    @@index([hadithNumber])
    @@index([difficulty])
    @@index([type])
    @@index([style])
    @@index([courseId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Setting {
    key String @id()
    value String @db.Text()

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@allow('create,read,update', true)
/// @@allow('delete', auth() != null)
model Exam {
    id String @id() @default(cuid())
    grade Int?
    submittedAt DateTime?
    createdAt DateTime @default(now())
    correctedAt DateTime?
    repeatFromSameHadith Boolean @default(false)
    courseId String
    curriculumId String
    studentId String?
    correctorId String?
    corrector User? @relation("Exam_corrector", fields: [correctorId], references: [id], onDelete: Cascade)
    student User? @relation("Exam_student", fields: [studentId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
    groups ExamQuestionGroup[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([grade])
    @@index([studentId])
    @@index([correctorId])
    @@index([curriculumId])
    @@index([courseId])
}

/// @@allow('create,read,update', true)
/// @@Gen.model(hide: true)
model ExamQuestionGroup {
    id String @id() @default(cuid())
    number Int
    gradePerQuestion Float
    order Int
    difficulty QuestionDifficulty?
    styleOrType String?
    examId String
    exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
    questions GroupQuestion[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([examId])
    @@index([order])
}

/// @@allow('create,read,update', true)
/// @@Gen.model(hide: true)
model GroupQuestion {
    id Int @id() @default(autoincrement())
    answer String? @db.Text()
    order Int @default(1)
    isCorrect Boolean @default(false)
    groupId String
    questionId String
    group ExamQuestionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([questionId])
    @@index([order])
    @@index([groupId])
}

/// @@allow('all', auth() != null)
model Cycle {
    id String @id() @default(cuid())
    name String
    courses CycleCourse[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Course {
    id String @id() @default(cuid())
    name String
    curricula Track[]
    questions Question[]
    exams Exam[]
    cycles CycleCourse[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@Gen.model(hide: true)
model CycleCourse {
    id Int @id() @default(autoincrement())
    courseId String
    cycleId String
    cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([courseId])
    @@index([cycleId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Track {
    id String @id() @default(cuid())
    name String
    courseId String
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    curricula Curriculum[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([courseId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Curriculum {
    id String @id() @default(cuid())
    name String
    trackId String
    track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
    parts CurriculumPart[]
    exams Exam[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([trackId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
/// @@Gen.model(hide: true)
model CurriculumPart {
    id Int @id() @default(autoincrement())
    name String
    number Int
    from Int
    to Int
    curriculumId String
    curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([curriculumId])
}