datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/kysely"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

enum UserRole {
  ADMIN
  STUDENT
  CORRECTOR
}

enum QuestionType {
  WRITTEN
  MCQ
}

model QuestionStyle {
  id             String       @id() @default(dbgenerated("gen_random_uuid()"))
  name           String       @unique
  type           QuestionType
  choicesColumns String[]
  questions      Question[]
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum QuizType {
  WHOLE_CURRICULUM
  FIRST_MEHWARY
  SECOND_MEHWARY
}

enum QuestionsGroupType {
  MANUAL
  AUTOMATIC
}

model Account {
  id                String  @id() @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text()
  access_token      String? @db.Text()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text()
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id() @default(dbgenerated("gen_random_uuid()"))
  name                String
  email               String               @unique()
  emailVerified       DateTime?
  password            String
  image               String?
  phone               String?
  role                UserRole
  quizzes             Quiz[]               @relation("Quiz_examinee")
  cycles              UserCycle[]
  accounts            Account[]
  sessions            Session[]
  resetPasswordTokens ResetPasswordToken[]
  correctedQuizzes    Quiz[]               @relation("Quiz_corrector")

  @@index([name])
}

model UserCycle {
  id           String     @id() @default(dbgenerated("gen_random_uuid()"))
  userId       String
  cycleId      String
  curriculumId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle        Cycle      @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  Curriculum   Curriculum @relation(fields: [curriculumId], references: [id])

  @@unique([cycleId, userId, curriculumId])
  @@index([userId])
  @@index([cycleId])
  @@index([curriculumId])
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model ResetPasswordToken {
  token   String   @id() @default(dbgenerated("gen_random_uuid()"))
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime

  @@index([userId])
}

model Question {
  id             String             @id() @default(dbgenerated("gen_random_uuid()"))
  number         Int
  pageNumber     Int
  partNumber     Int
  hadithNumber   Int
  type           QuestionType
  difficulty     QuestionDifficulty
  text           String             @db.Text()
  textForTrue    String?            @db.Text()
  textForFalse   String?            @db.Text()
  option1        String?            @db.Text()
  option2        String?            @db.Text()
  option3        String?            @db.Text()
  option4        String?            @db.Text()
  answer         String             @db.Text()
  anotherAnswer  String
  isInsideShaded Boolean
  objective      String
  courseId       String
  styleId        String
  course         Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  style          QuestionStyle      @relation(fields: [styleId], references: [id], onDelete: Cascade)
  systemExams    ModelQuestion[]
  errorReports   ErrorReport[]

  @@index([partNumber])
  @@index([pageNumber])
  @@index([hadithNumber])
  @@index([difficulty])
  // @@index([text])
  @@index([type])
  @@index([styleId])
  @@index([courseId])
}

model Model {
  id            String          @id() @default(dbgenerated("gen_random_uuid()"))
  systemExamId  String?
  systemExam    SystemExam?     @relation(fields: [systemExamId], references: [id], onDelete: Cascade)
  ModelQuestion ModelQuestion[]
  Quiz          Quiz[]
}

model ModelQuestion {
  id         String   @id() @default(dbgenerated("gen_random_uuid()"))
  modelId    String
  questionId String
  weight     Int
  order      Int
  model      Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    Answer[]

  @@index([modelId])
  @@index([questionId])
}

model SystemExam {
  id                   String           @id() @default(dbgenerated("gen_random_uuid()"))
  name                 String
  type                 QuizType
  createdAt            DateTime         @default(now())
  endsAt               DateTime?
  repeatFromSameHadith Boolean          @default(false)
  curriculumId         String
  cycleId              String
  curriculum           Curriculum       @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  cycle                Cycle            @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  groups               QuestionsGroup[]
  quizzes              Quiz[]
  models               Model[]

  @@index([type])
  @@index([curriculumId])
  @@index([cycleId])
}

model Quiz {
  id           String      @id() @default(dbgenerated("gen_random_uuid()"))
  type         QuizType    @default(WHOLE_CURRICULUM)
  grade        Int?
  percentage   Float?
  total        Int
  createdAt    DateTime    @default(now())
  enteredAt    DateTime?
  submittedAt  DateTime?
  correctedAt  DateTime?
  endsAt       DateTime?
  curriculumId String
  examineeId   String?
  correctorId  String?
  systemExamId String?
  modelId      String
  corrector    User?       @relation("Quiz_corrector", fields: [correctorId], references: [id], onDelete: Cascade)
  examinee     User?       @relation("Quiz_examinee", fields: [examineeId], references: [id], onDelete: Cascade)
  curriculum   Curriculum  @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  systemExam   SystemExam? @relation(fields: [systemExamId], references: [id], onDelete: Cascade)
  model        Model       @relation(fields: [modelId], references: [id], onDelete: Cascade)
  answers      Answer[]

  @@index([grade])
  @@index([type])
  @@index([examineeId])
  @@index([correctorId])
  @@index([curriculumId])
  @@index([systemExamId])
}

model QuestionsGroup {
  id               String              @id() @default(dbgenerated("gen_random_uuid()"))
  type             QuestionsGroupType  @default(AUTOMATIC)
  order            Int
  questionsNumber  Int?
  gradePerQuestion Int?
  difficulty       QuestionDifficulty?
  styleOrType      String?
  systemExamId     String
  systemExam       SystemExam          @relation(fields: [systemExamId], references: [id], onDelete: Cascade)

  @@index([systemExamId])
  @@index([order])
}

model Answer {
  id              String        @id() @default(dbgenerated("gen_random_uuid()"))
  answer          String?       @db.Text()
  grade           Int?
  modelQuestionId String
  quizId          String
  modelQuestion   ModelQuestion @relation(fields: [modelQuestionId], references: [id], onDelete: Cascade)
  quiz            Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([modelQuestionId, quizId])
  @@index([quizId])
  @@index([modelQuestionId])
}

model Cycle {
  id          String        @id() @default(dbgenerated("gen_random_uuid()"))
  name        String
  courses     CycleCourse[]
  users       UserCycle[]
  systemExams SystemExam[]
}

model Course {
  id        String        @id() @default(dbgenerated("gen_random_uuid()"))
  name      String        @unique
  tracks    Track[]
  questions Question[]
  cycles    CycleCourse[]

  @@index([name])
}

model CycleCourse {
  id       Int    @id() @default(autoincrement())
  courseId String
  cycleId  String
  cycle    Cycle  @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([cycleId])
}

model Track {
  id        String       @id() @default(dbgenerated("gen_random_uuid()"))
  name      String
  courseId  String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  curricula Curriculum[]

  @@unique([name, courseId])
  @@index([name])
  @@index([courseId])
}

model Curriculum {
  id          String           @id() @default(dbgenerated("gen_random_uuid()"))
  name        String
  trackId     String
  track       Track            @relation(fields: [trackId], references: [id], onDelete: Cascade)
  parts       CurriculumPart[]
  quizzes     Quiz[]
  systemExams SystemExam[]
  users       UserCycle[]

  @@unique([name, trackId])
  @@index([name])
  @@index([trackId])
}

model CurriculumPart {
  id           String     @id() @default(dbgenerated("gen_random_uuid()"))
  name         String
  number       Int
  from         Int
  mid          Int
  to           Int
  curriculumId String
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@index([curriculumId])
}

model ErrorReport {
  id         String   @id() @default(dbgenerated("gen_random_uuid()"))
  name       String
  email      String
  note       String   @db.Text()
  createdAt  DateTime @default(now())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([createdAt])
}

model Setting {
  key   String @id() @db.VarChar(255)
  value String
}
