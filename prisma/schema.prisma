//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

/// @@Gen.model(hide: true)
model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    password String?
    image String?
    role String?
    accounts Account[]
    sessions Session[]
    exams Exam[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@Gen.model(hide: true)
model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime
    @@unique([identifier, token])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Question {
    id String @id() @default(cuid())
    number Int
    pageNumber Int
    partNumber Int
    hadithNumber Int
    text String @db.Text()
    type String
    style String
    difficulty String
    option1 String? @db.Text()
    option2 String? @db.Text()
    option3 String? @db.Text()
    option4 String? @db.Text()
    textForTrue String? @db.Text()
    textForFalse String? @db.Text()
    answer String @db.Text()
    courseId String
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    exams ExamQuestion[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([difficulty])
    @@index([type])
    @@index([pageNumber])
    @@index([style])
    @@index([courseId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Setting {
    key String @id()
    value String @db.Text()

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() != null)
model Exam {
    id String @id() @default(cuid())
    difficulty String
    userId String?
    grade Int?
    submittedAt DateTime?
    createdAt DateTime @default(now())
    courseId String
    curriculumId String
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    curriculum Track @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
    questions ExamQuestion[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([grade])
    @@index([difficulty])
    @@index([userId])
    @@index([curriculumId])
    @@index([courseId])
}

/// @@Gen.model(hide: true)
model ExamQuestion {
    id Int @id() @default(autoincrement())
    examId String
    questionId String
    answer String? @db.Text()
    isCorrect Boolean @default(false)
    exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([questionId])
    @@index([examId])
}

/// @@allow('all', auth() != null)
model Cycle {
    id String @id() @default(cuid())
    name String
    courses CycleCourse[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Course {
    id String @id() @default(cuid())
    name String
    curricula Track[]
    questions Question[]
    exams Exam[]
    cycles CycleCourse[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@Gen.model(hide: true)
model CycleCourse {
    id Int @id() @default(autoincrement())
    courseId String
    cycleId String
    cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([courseId])
    @@index([cycleId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Track {
    id String @id() @default(cuid())
    name String
    courseId String
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    exams Exam[]
    curricula Curriculum[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([courseId])
}

/// @@allow('create,update,delete', auth() != null)
/// @@allow('read', true)
model Curriculum {
    id String @id() @default(cuid())
    name String
    fromPage Int
    toPage Int
    trackId String
    track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([trackId])
    @@index([fromPage])
    @@index([toPage])
}